// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductTracking.Infrastructure.Data;

#nullable disable

namespace ProductTracking.Infrastructure.Migrations
{
    [DbContext(typeof(ProductTrackingDbContext))]
    [Migration("20230219055408_fixed_menu_seed")]
    partial class fixed_menu_seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationOffice", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("officeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationsId", "officeId");

                    b.HasIndex("officeId");

                    b.ToTable("ApplicationOffice");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ModuleRole", b =>
                {
                    b.Property<Guid>("ModulesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ModulesId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RoleModule", (string)null);
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("541f2c3a-c67e-4b70-b58d-188486b7e04a"),
                            Desc = "Security",
                            Name = "Security"
                        },
                        new
                        {
                            Id = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Desc = "Product Tracking",
                            Name = "Product Tracking"
                        });
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.LoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SecApl")
                        .HasColumnType("bit");

                    b.Property<string>("ToolTip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsedIn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cf6f49d-69a6-47d7-a473-58d941538bab"),
                            Active = true,
                            MUrl = "/welcome",
                            MenuText = "Welcome",
                            OrderNo = 1,
                            SecApl = false,
                            ToolTip = "Welcome"
                        },
                        new
                        {
                            Id = new Guid("78ce1776-2cee-43d8-892a-b9eabefea327"),
                            Active = true,
                            MenuText = "Security",
                            OrderNo = 2,
                            SecApl = true,
                            ToolTip = "Security"
                        },
                        new
                        {
                            Id = new Guid("49b12a5a-6e12-48d2-bd86-8e83382ca4e7"),
                            Active = true,
                            MUrl = "/Security/Users",
                            MenuText = "Users",
                            OrderNo = 1,
                            ParentId = new Guid("78ce1776-2cee-43d8-892a-b9eabefea327"),
                            SecApl = true,
                            ToolTip = "Users"
                        },
                        new
                        {
                            Id = new Guid("a779afac-05fa-4334-9b6b-2ede4a925cd4"),
                            Active = true,
                            MUrl = "/Security/Role",
                            MenuText = "Role",
                            OrderNo = 2,
                            ParentId = new Guid("78ce1776-2cee-43d8-892a-b9eabefea327"),
                            SecApl = true,
                            ToolTip = "Role"
                        },
                        new
                        {
                            Id = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            Active = true,
                            MenuText = "ProductTracking",
                            OrderNo = 3,
                            SecApl = true,
                            ToolTip = "Product Tracking"
                        },
                        new
                        {
                            Id = new Guid("8a314e94-1102-4b65-a2a9-9552133cf10f"),
                            Active = true,
                            MUrl = "/ProductTracking/AdminDashboard",
                            MenuText = "AdminDashboard",
                            OrderNo = 1,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Admin Dahboard"
                        },
                        new
                        {
                            Id = new Guid("8b52e051-0d8b-49ff-a515-53b2ad9a9975"),
                            Active = true,
                            MUrl = "/ProductTracking/CheckpointUserDashboard",
                            MenuText = "CheckpointUserDashboard",
                            OrderNo = 2,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Checkpoint User Dashboard"
                        },
                        new
                        {
                            Id = new Guid("32508cdc-db75-437e-bcc8-6cc67e2c82b2"),
                            Active = true,
                            MUrl = "/ProductTracking/Consignment",
                            MenuText = "Consignmnet",
                            OrderNo = 3,
                            SecApl = true,
                            ToolTip = "Consignment"
                        },
                        new
                        {
                            Id = new Guid("0365f4a8-1574-42bd-a331-4e160c6c40ed"),
                            Active = true,
                            MUrl = "/ProductTracking/SearchConsignment",
                            MenuText = "SearchConsignment",
                            OrderNo = 4,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Search Consignment"
                        },
                        new
                        {
                            Id = new Guid("d0ac4225-14f7-4b4c-bc0b-ecdfc6003d75"),
                            Active = true,
                            MUrl = "/ProductTracking/ContainerList",
                            MenuText = "ContainerList",
                            OrderNo = 5,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Container List"
                        },
                        new
                        {
                            Id = new Guid("b9019358-a9f8-4f29-b6f3-e9ca572bbab7"),
                            Active = true,
                            MUrl = "/ProductTracking/Container",
                            MenuText = "Container",
                            OrderNo = 4,
                            SecApl = true,
                            ToolTip = "Container"
                        },
                        new
                        {
                            Id = new Guid("807041f5-a442-422c-94c7-0065e46c483c"),
                            Active = false,
                            MUrl = "/ProductTracking/ItemGroup",
                            MenuText = "ItemGroup",
                            OrderNo = 7,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Item Group"
                        },
                        new
                        {
                            Id = new Guid("412d4976-15b3-451c-9ddd-1fda0ae45fb1"),
                            Active = false,
                            MUrl = "/ProductTracking/ItemList",
                            MenuText = "ItemList",
                            OrderNo = 8,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Item List"
                        },
                        new
                        {
                            Id = new Guid("adab8a6c-7a06-48bd-b5eb-830be46c5d68"),
                            Active = true,
                            MUrl = "/ProductTracking/Checkpoint",
                            MenuText = "Checkpoints",
                            OrderNo = 9,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Checkpoints"
                        },
                        new
                        {
                            Id = new Guid("05a9b8bd-e08b-4493-b7fd-f47602b63ca8"),
                            Active = true,
                            MUrl = "/ProductTracking/Package",
                            MenuText = "Package",
                            OrderNo = 10,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Package"
                        },
                        new
                        {
                            Id = new Guid("400f7539-aa3e-459c-9159-154759fd5e12"),
                            Active = true,
                            MUrl = "/ProductTracking/Payment",
                            MenuText = "Payment",
                            OrderNo = 11,
                            ParentId = new Guid("5dd87968-fba4-43f5-b61d-75e705be1f9f"),
                            SecApl = true,
                            ToolTip = "Payment"
                        });
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ApplicationId", "Name")
                        .IsUnique();

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c48ccbd3-cbc1-4ce3-b64d-c77299b737d0"),
                            ApplicationId = new Guid("541f2c3a-c67e-4b70-b58d-188486b7e04a"),
                            Description = "User Management",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("49b12a5a-6e12-48d2-bd86-8e83382ca4e7"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("71a6e8c0-6347-4a57-9e0c-865f982d010e"),
                            ApplicationId = new Guid("541f2c3a-c67e-4b70-b58d-188486b7e04a"),
                            Description = "Role Management",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("a779afac-05fa-4334-9b6b-2ede4a925cd4"),
                            Name = "Role"
                        },
                        new
                        {
                            Id = new Guid("80ab7bda-7402-43ff-97d0-054c62915190"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Consignment Entry",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("32508cdc-db75-437e-bcc8-6cc67e2c82b2"),
                            Name = "Consignmnet"
                        },
                        new
                        {
                            Id = new Guid("35fd9e2e-6647-4dc7-a18b-f7db036ee7c2"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Container",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("b9019358-a9f8-4f29-b6f3-e9ca572bbab7"),
                            Name = "Container"
                        },
                        new
                        {
                            Id = new Guid("d6ab380b-8a6d-4def-86b7-d28cbe3e734c"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Container List",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("d0ac4225-14f7-4b4c-bc0b-ecdfc6003d75"),
                            Name = "ContainerList "
                        },
                        new
                        {
                            Id = new Guid("8477d51f-980f-4dc5-8bdc-a94a40efad0c"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Package",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("05a9b8bd-e08b-4493-b7fd-f47602b63ca8"),
                            Name = "Package "
                        },
                        new
                        {
                            Id = new Guid("32f72f61-4b21-47ad-8ab5-87b12b3196cc"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Payment",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("400f7539-aa3e-459c-9159-154759fd5e12"),
                            Name = "Payment "
                        },
                        new
                        {
                            Id = new Guid("ed0ddce0-b06b-4915-aa79-bde61ac1a22f"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Search Consignment",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("0365f4a8-1574-42bd-a331-4e160c6c40ed"),
                            Name = "SearchConsignment"
                        },
                        new
                        {
                            Id = new Guid("2776fcc6-9152-44dc-9eb3-09feb06f1e03"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Admin Dashboard",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("8a314e94-1102-4b65-a2a9-9552133cf10f"),
                            Name = "Admin Dashboard"
                        },
                        new
                        {
                            Id = new Guid("3d829213-85e2-4562-82b8-2345fb90e3a1"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Checkpoint User Dashboard",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("8b52e051-0d8b-49ff-a515-53b2ad9a9975"),
                            Name = "Checkpoint User Dashboard"
                        },
                        new
                        {
                            Id = new Guid("f5bb0f10-1a8f-4398-bf07-c561c9257de4"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Item List",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("412d4976-15b3-451c-9ddd-1fda0ae45fb1"),
                            Name = "Item List"
                        },
                        new
                        {
                            Id = new Guid("b70f5399-8929-4493-bcc3-75c38721ed21"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Checkpoints",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("adab8a6c-7a06-48bd-b5eb-830be46c5d68"),
                            Name = "Checkpoints"
                        },
                        new
                        {
                            Id = new Guid("e0818357-af77-4a05-9879-3aeb0749ae0f"),
                            ApplicationId = new Guid("9e936e4c-c13e-48ab-89b8-e7f72c1c658c"),
                            Description = "Item Groups",
                            FromDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            MenuId = new Guid("807041f5-a442-422c-94c7-0065e46c483c"),
                            Name = "ItemGroups"
                        });
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.ModuleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("225fcfd8-08cd-4e95-8018-1be6d7ef81e6"),
                            FunctionId = 0,
                            ModuleId = new Guid("c48ccbd3-cbc1-4ce3-b64d-c77299b737d0")
                        },
                        new
                        {
                            Id = new Guid("16617fdd-323c-46eb-9032-73cab5421731"),
                            FunctionId = 1,
                            ModuleId = new Guid("c48ccbd3-cbc1-4ce3-b64d-c77299b737d0")
                        },
                        new
                        {
                            Id = new Guid("53c400fd-ad21-42da-8326-dc3a7a69305f"),
                            FunctionId = 2,
                            ModuleId = new Guid("c48ccbd3-cbc1-4ce3-b64d-c77299b737d0")
                        },
                        new
                        {
                            Id = new Guid("93184797-0528-4ec5-86cb-faf7fc708cc9"),
                            FunctionId = 3,
                            ModuleId = new Guid("c48ccbd3-cbc1-4ce3-b64d-c77299b737d0")
                        },
                        new
                        {
                            Id = new Guid("4d9503ae-6cf9-4f50-abff-e583c5e24572"),
                            FunctionId = 4,
                            ModuleId = new Guid("c48ccbd3-cbc1-4ce3-b64d-c77299b737d0")
                        },
                        new
                        {
                            Id = new Guid("bc175d7d-687e-40fe-a738-4282e8c0d4e6"),
                            FunctionId = 0,
                            ModuleId = new Guid("71a6e8c0-6347-4a57-9e0c-865f982d010e")
                        },
                        new
                        {
                            Id = new Guid("a8043dcd-dcd5-4490-9a71-800269326313"),
                            FunctionId = 1,
                            ModuleId = new Guid("71a6e8c0-6347-4a57-9e0c-865f982d010e")
                        },
                        new
                        {
                            Id = new Guid("37a4300b-3d6c-4e1b-a0ed-3e42008d68aa"),
                            FunctionId = 2,
                            ModuleId = new Guid("71a6e8c0-6347-4a57-9e0c-865f982d010e")
                        },
                        new
                        {
                            Id = new Guid("bb1e94bc-b609-4b33-aa69-884c657719fb"),
                            FunctionId = 3,
                            ModuleId = new Guid("71a6e8c0-6347-4a57-9e0c-865f982d010e")
                        },
                        new
                        {
                            Id = new Guid("07f65903-2424-40a2-8ead-0f60e68b6eb8"),
                            FunctionId = 4,
                            ModuleId = new Guid("71a6e8c0-6347-4a57-9e0c-865f982d010e")
                        },
                        new
                        {
                            Id = new Guid("2372d3ef-4811-4f3b-a9e0-1b293ba8bf9d"),
                            FunctionId = 0,
                            ModuleId = new Guid("80ab7bda-7402-43ff-97d0-054c62915190")
                        },
                        new
                        {
                            Id = new Guid("74d45031-0e89-48a1-817a-bc0b6bf9b451"),
                            FunctionId = 1,
                            ModuleId = new Guid("80ab7bda-7402-43ff-97d0-054c62915190")
                        },
                        new
                        {
                            Id = new Guid("2a46bf6a-5c51-4e55-9b29-aca468dc7467"),
                            FunctionId = 2,
                            ModuleId = new Guid("80ab7bda-7402-43ff-97d0-054c62915190")
                        },
                        new
                        {
                            Id = new Guid("6fa727b1-f74d-4192-b94a-b7458ed0c1d6"),
                            FunctionId = 3,
                            ModuleId = new Guid("80ab7bda-7402-43ff-97d0-054c62915190")
                        },
                        new
                        {
                            Id = new Guid("1f4ed3e7-7ecc-4e56-9362-22c997c4fbed"),
                            FunctionId = 4,
                            ModuleId = new Guid("80ab7bda-7402-43ff-97d0-054c62915190")
                        },
                        new
                        {
                            Id = new Guid("58d53946-a82a-463e-866c-10ed404fd123"),
                            FunctionId = 0,
                            ModuleId = new Guid("35fd9e2e-6647-4dc7-a18b-f7db036ee7c2")
                        },
                        new
                        {
                            Id = new Guid("3fcf88d8-14da-4a11-8977-4612cfddaaed"),
                            FunctionId = 1,
                            ModuleId = new Guid("35fd9e2e-6647-4dc7-a18b-f7db036ee7c2")
                        },
                        new
                        {
                            Id = new Guid("ad500926-6347-49a2-af43-6d2838eb2166"),
                            FunctionId = 2,
                            ModuleId = new Guid("35fd9e2e-6647-4dc7-a18b-f7db036ee7c2")
                        },
                        new
                        {
                            Id = new Guid("ac2dfe0b-f376-43f2-876d-d21111f3bae2"),
                            FunctionId = 3,
                            ModuleId = new Guid("35fd9e2e-6647-4dc7-a18b-f7db036ee7c2")
                        },
                        new
                        {
                            Id = new Guid("435fd0d5-85fe-4c13-a869-e14656157b8c"),
                            FunctionId = 4,
                            ModuleId = new Guid("35fd9e2e-6647-4dc7-a18b-f7db036ee7c2")
                        },
                        new
                        {
                            Id = new Guid("5555c4eb-50dc-4f9e-a3bc-18cf0acf270e"),
                            FunctionId = 0,
                            ModuleId = new Guid("d6ab380b-8a6d-4def-86b7-d28cbe3e734c")
                        },
                        new
                        {
                            Id = new Guid("9fe41e12-cdf2-47a8-9785-4daabc79e2ad"),
                            FunctionId = 1,
                            ModuleId = new Guid("d6ab380b-8a6d-4def-86b7-d28cbe3e734c")
                        },
                        new
                        {
                            Id = new Guid("fb645f1a-7699-417f-8f83-f9c10dbe063d"),
                            FunctionId = 2,
                            ModuleId = new Guid("d6ab380b-8a6d-4def-86b7-d28cbe3e734c")
                        },
                        new
                        {
                            Id = new Guid("eb1d9441-9f85-46e9-895f-882043c14922"),
                            FunctionId = 3,
                            ModuleId = new Guid("d6ab380b-8a6d-4def-86b7-d28cbe3e734c")
                        },
                        new
                        {
                            Id = new Guid("d9e14acc-6aca-4adb-b61e-fa72bf3b1393"),
                            FunctionId = 4,
                            ModuleId = new Guid("d6ab380b-8a6d-4def-86b7-d28cbe3e734c")
                        },
                        new
                        {
                            Id = new Guid("6ee04b3b-7867-47bc-b77f-83882127dbba"),
                            FunctionId = 0,
                            ModuleId = new Guid("8477d51f-980f-4dc5-8bdc-a94a40efad0c")
                        },
                        new
                        {
                            Id = new Guid("3d313b1e-b097-49a4-85c0-d1b1e7e588f6"),
                            FunctionId = 1,
                            ModuleId = new Guid("8477d51f-980f-4dc5-8bdc-a94a40efad0c")
                        },
                        new
                        {
                            Id = new Guid("bfb61e90-d5f7-4ebb-aa18-b318eb6528c4"),
                            FunctionId = 2,
                            ModuleId = new Guid("8477d51f-980f-4dc5-8bdc-a94a40efad0c")
                        },
                        new
                        {
                            Id = new Guid("d5576878-207e-4e0d-a193-65719e4f92f7"),
                            FunctionId = 3,
                            ModuleId = new Guid("8477d51f-980f-4dc5-8bdc-a94a40efad0c")
                        },
                        new
                        {
                            Id = new Guid("554b76c4-80ee-466f-a885-af387ef59e3b"),
                            FunctionId = 4,
                            ModuleId = new Guid("8477d51f-980f-4dc5-8bdc-a94a40efad0c")
                        },
                        new
                        {
                            Id = new Guid("fffa286b-e580-45ec-a9f4-7b7b41b2e87b"),
                            FunctionId = 0,
                            ModuleId = new Guid("32f72f61-4b21-47ad-8ab5-87b12b3196cc")
                        },
                        new
                        {
                            Id = new Guid("fc7f12a9-8a1e-4afc-b505-f5753db019cc"),
                            FunctionId = 1,
                            ModuleId = new Guid("32f72f61-4b21-47ad-8ab5-87b12b3196cc")
                        },
                        new
                        {
                            Id = new Guid("528d331f-409f-4b01-98d8-861218080a30"),
                            FunctionId = 2,
                            ModuleId = new Guid("32f72f61-4b21-47ad-8ab5-87b12b3196cc")
                        },
                        new
                        {
                            Id = new Guid("d20b3676-08d0-47e5-9a78-a0531f3c0b8f"),
                            FunctionId = 3,
                            ModuleId = new Guid("32f72f61-4b21-47ad-8ab5-87b12b3196cc")
                        },
                        new
                        {
                            Id = new Guid("cc30b194-e74f-48fc-b574-7fe74da24f7d"),
                            FunctionId = 4,
                            ModuleId = new Guid("32f72f61-4b21-47ad-8ab5-87b12b3196cc")
                        },
                        new
                        {
                            Id = new Guid("01149c07-9ce2-4be4-a7f9-0423329f234f"),
                            FunctionId = 0,
                            ModuleId = new Guid("ed0ddce0-b06b-4915-aa79-bde61ac1a22f")
                        },
                        new
                        {
                            Id = new Guid("3a38bb4f-b1c8-4e25-9015-f5186d048af4"),
                            FunctionId = 1,
                            ModuleId = new Guid("ed0ddce0-b06b-4915-aa79-bde61ac1a22f")
                        },
                        new
                        {
                            Id = new Guid("a85d4eb8-590b-4858-ab41-12143a7bdf2e"),
                            FunctionId = 2,
                            ModuleId = new Guid("ed0ddce0-b06b-4915-aa79-bde61ac1a22f")
                        },
                        new
                        {
                            Id = new Guid("7c0d7cd4-023d-4c44-b968-f9e12ee7bc05"),
                            FunctionId = 3,
                            ModuleId = new Guid("ed0ddce0-b06b-4915-aa79-bde61ac1a22f")
                        },
                        new
                        {
                            Id = new Guid("bf12e57d-3c29-46af-a10c-c39e3a9dad2f"),
                            FunctionId = 4,
                            ModuleId = new Guid("ed0ddce0-b06b-4915-aa79-bde61ac1a22f")
                        },
                        new
                        {
                            Id = new Guid("441836a5-8a36-46f9-9ae8-9f685b70bfd9"),
                            FunctionId = 0,
                            ModuleId = new Guid("2776fcc6-9152-44dc-9eb3-09feb06f1e03")
                        },
                        new
                        {
                            Id = new Guid("f1ef9408-04aa-446c-acf6-7e195b74ee64"),
                            FunctionId = 1,
                            ModuleId = new Guid("2776fcc6-9152-44dc-9eb3-09feb06f1e03")
                        },
                        new
                        {
                            Id = new Guid("a77c7b10-7425-4187-a071-18c560a497fc"),
                            FunctionId = 2,
                            ModuleId = new Guid("2776fcc6-9152-44dc-9eb3-09feb06f1e03")
                        },
                        new
                        {
                            Id = new Guid("edc9e686-bf21-4a32-8696-012ba360120f"),
                            FunctionId = 3,
                            ModuleId = new Guid("2776fcc6-9152-44dc-9eb3-09feb06f1e03")
                        },
                        new
                        {
                            Id = new Guid("beb0076e-21f3-49f2-af06-fa61d7775eb2"),
                            FunctionId = 4,
                            ModuleId = new Guid("2776fcc6-9152-44dc-9eb3-09feb06f1e03")
                        },
                        new
                        {
                            Id = new Guid("d7b54046-e035-49d8-81cf-37e5011d3c6f"),
                            FunctionId = 0,
                            ModuleId = new Guid("3d829213-85e2-4562-82b8-2345fb90e3a1")
                        },
                        new
                        {
                            Id = new Guid("b6f82e0c-b48c-4291-b241-a812967858d4"),
                            FunctionId = 1,
                            ModuleId = new Guid("3d829213-85e2-4562-82b8-2345fb90e3a1")
                        },
                        new
                        {
                            Id = new Guid("197bdd86-0969-4af2-afa1-d5d248009408"),
                            FunctionId = 2,
                            ModuleId = new Guid("3d829213-85e2-4562-82b8-2345fb90e3a1")
                        },
                        new
                        {
                            Id = new Guid("175f94ae-def6-4a21-aedc-ffa1be5b7c30"),
                            FunctionId = 3,
                            ModuleId = new Guid("3d829213-85e2-4562-82b8-2345fb90e3a1")
                        },
                        new
                        {
                            Id = new Guid("395e4c74-0f2e-47aa-93bf-397c8d94a624"),
                            FunctionId = 4,
                            ModuleId = new Guid("3d829213-85e2-4562-82b8-2345fb90e3a1")
                        },
                        new
                        {
                            Id = new Guid("17f22f26-15a3-4a63-8144-e7d8d68d8364"),
                            FunctionId = 0,
                            ModuleId = new Guid("f5bb0f10-1a8f-4398-bf07-c561c9257de4")
                        },
                        new
                        {
                            Id = new Guid("8b8bee62-57dd-45da-9828-b8abed6ef140"),
                            FunctionId = 1,
                            ModuleId = new Guid("f5bb0f10-1a8f-4398-bf07-c561c9257de4")
                        },
                        new
                        {
                            Id = new Guid("ab4fa3c9-d315-438c-baf7-fa685c9554ec"),
                            FunctionId = 2,
                            ModuleId = new Guid("f5bb0f10-1a8f-4398-bf07-c561c9257de4")
                        },
                        new
                        {
                            Id = new Guid("8c6ce7d6-c66f-4fe2-a02d-b145d18f71a5"),
                            FunctionId = 3,
                            ModuleId = new Guid("f5bb0f10-1a8f-4398-bf07-c561c9257de4")
                        },
                        new
                        {
                            Id = new Guid("bbe5ebc2-3f06-48b1-8f71-73f5f085f955"),
                            FunctionId = 4,
                            ModuleId = new Guid("f5bb0f10-1a8f-4398-bf07-c561c9257de4")
                        },
                        new
                        {
                            Id = new Guid("7d44211e-63e3-459e-ac07-c282126c6ae4"),
                            FunctionId = 0,
                            ModuleId = new Guid("b70f5399-8929-4493-bcc3-75c38721ed21")
                        },
                        new
                        {
                            Id = new Guid("585c0c84-6e49-47a8-bf36-ba704b2d3c65"),
                            FunctionId = 1,
                            ModuleId = new Guid("b70f5399-8929-4493-bcc3-75c38721ed21")
                        },
                        new
                        {
                            Id = new Guid("3bbb00d7-5111-4ae3-88ee-bbeaa647d10d"),
                            FunctionId = 2,
                            ModuleId = new Guid("b70f5399-8929-4493-bcc3-75c38721ed21")
                        },
                        new
                        {
                            Id = new Guid("6dfbf581-cea3-4a56-a8e7-2e915a12d424"),
                            FunctionId = 3,
                            ModuleId = new Guid("b70f5399-8929-4493-bcc3-75c38721ed21")
                        },
                        new
                        {
                            Id = new Guid("8f712a63-7f74-40aa-8c70-0a7d16c1d663"),
                            FunctionId = 4,
                            ModuleId = new Guid("b70f5399-8929-4493-bcc3-75c38721ed21")
                        },
                        new
                        {
                            Id = new Guid("8fd30650-6ac2-418b-b85c-45bd613cccec"),
                            FunctionId = 0,
                            ModuleId = new Guid("e0818357-af77-4a05-9879-3aeb0749ae0f")
                        },
                        new
                        {
                            Id = new Guid("767cb5a3-687c-4c6a-a436-e533867b8a91"),
                            FunctionId = 1,
                            ModuleId = new Guid("e0818357-af77-4a05-9879-3aeb0749ae0f")
                        },
                        new
                        {
                            Id = new Guid("af63eba7-64c2-4975-89ec-38c596e33b08"),
                            FunctionId = 2,
                            ModuleId = new Guid("e0818357-af77-4a05-9879-3aeb0749ae0f")
                        },
                        new
                        {
                            Id = new Guid("913699eb-6ec7-428d-bd79-8e79a01d16c8"),
                            FunctionId = 3,
                            ModuleId = new Guid("e0818357-af77-4a05-9879-3aeb0749ae0f")
                        },
                        new
                        {
                            Id = new Guid("bc52140f-e811-4ef3-87af-4164651f968d"),
                            FunctionId = 4,
                            ModuleId = new Guid("e0818357-af77-4a05-9879-3aeb0749ae0f")
                        });
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntryById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("userId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModuleFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModuleFunctionId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("OfficeId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.RoleModuleFunction", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModuleFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "ModuleFunctionId");

                    b.HasIndex("ModuleFunctionId");

                    b.ToTable("RoleModuleFunctions");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AuthorizationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AuthorizationNo")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CheckpointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntryBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasPasswordChanged")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CheckpointId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OfficeId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.UserModuleFunction", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModuleFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ModuleFunctionId");

                    b.HasIndex("ModuleFunctionId");

                    b.ToTable("UserModuleFunctions");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.UserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AuthorizationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AuthorizationNo")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntryById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("UserStatuses");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.Settings.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameShort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isParrent")
                        .HasColumnType("bit");

                    b.Property<int>("officeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntryById");

                    b.HasIndex("ParentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("187cda14-9844-42e7-99ba-b8d4f0d59c3a"),
                            Address = "Yuwi",
                            Code = "ADO",
                            Contact = "ADO@gmail.com",
                            EntryDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            NameEng = "ADO Logistics",
                            NameNep = "ADO Logistics",
                            NameShort = "ADO",
                            Status = 0,
                            isParrent = false,
                            officeType = 0
                        });
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntryById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Consignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Advance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Consignee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConsignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConsignmentNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsignmentsStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CtnNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Freight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Insurance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LocalFreight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PackingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Payment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StartingStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("EntryById");

                    b.HasIndex("PackageId");

                    b.HasIndex("StartingStationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Consignments");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.ConsignmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentId");

                    b.HasIndex("EntryById");

                    b.HasIndex("ItemId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ConsignmentItems");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContainerNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DriverContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransferContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VechileNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("EntryById");

                    b.HasIndex("SourceId");

                    b.HasIndex("TransferContainerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.ContainerConsignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RecivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecivedStatus")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("EntryById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ContainerConsignments");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.HeaderContactDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConatactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderSNo")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntryById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("HeaderContactDetails");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameShort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntryById");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.ItemGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntryById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ItemGroups");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntryById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("ApplicationOffice", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.Settings.Office", null)
                        .WithMany()
                        .HasForeignKey("officeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModuleRole", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.LoginLog", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Menu", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Module", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Application", "Application")
                        .WithMany("Modules")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.Navigation("Application");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.ModuleFunction", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Module", "Module")
                        .WithMany("Functions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Password", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntryBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Role", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.ModuleFunction", null)
                        .WithMany("Roles")
                        .HasForeignKey("ModuleFunctionId");

                    b.HasOne("ProductTracking.Core.Entities.Settings.Office", "Office")
                        .WithMany("Roles")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.RoleModuleFunction", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.ModuleFunction", "ModuleFunction")
                        .WithMany()
                        .HasForeignKey("ModuleFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Role", "Role")
                        .WithMany("RoleModuleFunctions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleFunction");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.User", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", "Checkpoint")
                        .WithMany("Users")
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProductTracking.Core.Entities.Settings.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Checkpoint");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.UserModuleFunction", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.ModuleFunction", "ModuleFunction")
                        .WithMany()
                        .HasForeignKey("ModuleFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "User")
                        .WithMany("UserModuleFunctions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleFunction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.UserStatus", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntryBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.Settings.Office", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProductTracking.Core.Entities.Settings.Office", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("EntryBy");

                    b.Navigation("Parent");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("EntryBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Consignment", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId");

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", "CurrentLocation")
                        .WithMany("Consignments")
                        .HasForeignKey("CurrentLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", "StartingStation")
                        .WithMany()
                        .HasForeignKey("StartingStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Container");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Destination");

                    b.Navigation("EntryBy");

                    b.Navigation("Package");

                    b.Navigation("StartingStation");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.ConsignmentItem", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Consignment", "Consignment")
                        .WithMany("ConsignmentItems")
                        .HasForeignKey("ConsignmentId");

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Consignment");

                    b.Navigation("EntryBy");

                    b.Navigation("Item");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Container", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Container", "TransferContainer")
                        .WithMany()
                        .HasForeignKey("TransferContainerId");

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Destination");

                    b.Navigation("EntryBy");

                    b.Navigation("Source");

                    b.Navigation("TransferContainer");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.ContainerConsignment", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Consignment", "Consignment")
                        .WithMany()
                        .HasForeignKey("ConsignmentId");

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.Container", "Container")
                        .WithMany("ContainerConsignments")
                        .HasForeignKey("ContainerId");

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Consignment");

                    b.Navigation("Container");

                    b.Navigation("EntryBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.HeaderContactDetail", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("EntryBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Item", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.TrackingAggregate.ItemGroup", "ItemGroup")
                        .WithMany("Items")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("EntryBy");

                    b.Navigation("ItemGroup");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.ItemGroup", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("EntryBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Package", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "EntryBy")
                        .WithMany()
                        .HasForeignKey("EntryById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("EntryBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTracking.Core.Entities.AuthAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Application", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Module", b =>
                {
                    b.Navigation("Functions");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.ModuleFunction", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.Role", b =>
                {
                    b.Navigation("RoleModuleFunctions");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.AuthAggregate.User", b =>
                {
                    b.Navigation("UserModuleFunctions");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.Settings.Office", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Checkpoint", b =>
                {
                    b.Navigation("Consignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Consignment", b =>
                {
                    b.Navigation("ConsignmentItems");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.Container", b =>
                {
                    b.Navigation("ContainerConsignments");
                });

            modelBuilder.Entity("ProductTracking.Core.Entities.TrackingAggregate.ItemGroup", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
